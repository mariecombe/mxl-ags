#!/usr/bin/env python
# analyzeSENS.py


"""
Started 26 august 2013
Author: Marie Combe


"""

# importing the necessary modules

import sys
import os
import getopt
import numpy
import shutil
from scipy.optimize import curve_fit


#----------------------------------------------------------------------
def open_output(path,inputfoldernamelist):

    Dict = {}
    
    for i,fil in enumerate(inputfoldernamelist):
        inputpath = os.path.join(path,fil)
        f=open(inputpath,'rU') 
        lines=f.readlines()
        f.close()
        if (fil.startswith('output_gecros')):
            headerow=lines[6].strip().split()
            del lines[0:8]
        else:
            headerow=lines[0].strip().split()
            del lines[0]
        if (fil.startswith('output_dyn') or fil.endswith('output_sca')): 
	    if lines[-1].startswith('Saturation level'): del lines[-1:]
        if (fil.startswith('output_gecros')): del lines[-4:]
        dummy=[]
        for line in lines:
            dummy.append(line.strip().split())
        for j in range(0,len(dummy)):

            for k in range(0,len(dummy[j])):
                if (('-' in dummy[j][k] or '+' in dummy[j][k]) and not 'E' in dummy[j][k]): dummy[j][k] = 'NaN'
        data=numpy.array(dummy,dtype=float)
        dictnamelist = {}
        for j,varname in enumerate(headerow):
            dictnamelist[varname]=data[:,j]
        Dict[fil] = dictnamelist
 
    return Dict

#----------------------------------------------------------------------
def open_csv(inpath,namefilelist):

    import csv

    Dict = {}

    for i,namefile in enumerate(namefilelist):
        inputpath=os.path.join(inpath,namefile)
        f=open(inputpath,'rU')
        reader=csv.reader(f, delimiter=',', skipinitialspace=True)
        all=[]
        for row in reader:
            all.append(row)
        headerow=all[0]
        del all[0]
        datafloat=[]
        for row in all:
            datafloat.append(map(float,row))
        data=numpy.array(datafloat)
        dictnamelist = {}
        for j,varname in enumerate(headerow):
            dictnamelist[varname]=data[:,j]
        Dict[namefile] = dictnamelist

    return Dict

#----------------------------------------------------------------------
def sigmoid(x, slope):
    y = 3.8 / (1+ numpy.exp(-slope*(x-185.)))
    return y
    
#----------------------------------------------------------------------
def define_P4_range():

    X = numpy.arange(2.17,4.01,0.0366)
    P3 = [0.]*len(X)
    for i,val in enumerate(X):
        P3[i] = (2.**val)-0.999999
    P0 = numpy.arange(0.000001,1.6,0.064)
    P1 = numpy.arange(1.6,3.5,0.076) 
    P4 = numpy.concatenate((P0,P1,P3), axis=0)   
    
    return P4



#######################################################################
########################### START OF SCRIPT ###########################

if __name__ == "__main__":
    
    try:                                
        opts, args = getopt.getopt(sys.argv[1:], "-h")
    except getopt.GetoptError:           
        print "Error"
        sys.exit(2)      
    
    for options in opts:
        options=options[0].lower()
        if options == '-h':
            helptext = """
    This is the post-processing script for a 2-D MXL-A-gs sensitivity analysis. 
    It extracts data from multiple output files, which were generated by the  
    script executeRUNS (2-D sensitivity analysis execution script).

    You should call this script as:
    > ./analyseSENS.py var1 var2 folder_path
    where folder_path is the path to the 2-D sensitivity analysis output folder,
    var1 and var2 are your two tested drivers (see list of abbreviations in the
    script).
    
    The final post-processed output will be written in Results_Var1_Var2.dat, and 
    will be stored in the directory folder_path
   
                
                """
            
            print helptext
            
            sys.exit(2)      

    for items in args:
        items = items.lower()

    if len(args)<3:
        print "FAILURE\nYou forgot to write script arguments!! See help text (call it with -h)\n"
        sys.exit(2)

    folderr = args[2]
    if not os.path.exists(folderr): # if path does not exist
        print "Does not exist! (%s)" % items
        sys.exit(2)


    # Current directory

    currentdir = os.getcwd()
    analysisdir = os.path.join(currentdir, folderr)
    storagedir = '/Storage/MXL/Marie/MXL-Ags_Sensitivity'

    # Dictionnary with all drivers used for sensitivity analysis (you can always add some more!)
    
    drivers = {'wg'          : numpy.arange(0.06,0.1501,0.0009),
               'wg1'         : numpy.arange(0.096,0.1141,0.0006),
	       'wg2'         : numpy.arange(0.096,0.11410,0.00018),
	       'day'         : numpy.arange(130.,230.5,1.),
	       'P4'          : define_P4_range(),
	       'gammatheta'  : numpy.arange(0.002,0.00806,0.00006), 
	       'gammaq'      : numpy.arange(-0.005,0.00005,0.00005), 
	       'thetam0'     : numpy.arange(284.,290.03,0.06),
	       'cc'          : numpy.arange(0.000,0.303,0.003),
	       'la'          : numpy.arange(1.00,4.01,0.03),
	       'qm0'         : numpy.arange(6.00,14.08,0.08),
	       'wsls'        : numpy.arange(0.,0.0000401,0.0000004)  }

    # Define variables of sensitivity analysis
    
    Var1 = args[0]
    Var2 = args[1]
    Range1 = drivers[Var1]
    Range2 = drivers[Var2]


#######################################################################
##### -3- Extracting data

    
    # list of namoptions files for sensitivity analysis
    listofnamoptions = [f for f in os.listdir( analysisdir ) if ( f.startswith('nam') and (Var1[0:2] in f) and (Var2[0:2] in f) ) ]

    
    # Create a summary output file - erase old file if exists
    resfile = 'Results_'+Var1+'_'+Var2+'.dat'
    if (os.path.isfile(os.path.join(analysisdir,resfile))): os.remove(os.path.join(analysisdir,resfile))
    Results = open(os.path.join(analysisdir,resfile), 'w')

	    
    # preparing the LAI curve
    Rangelai = numpy.arange(130.,230.+1./2.,1.)
    CropObsDict = open_csv(storagedir,['LAI_obs_6-aug-2007.csv'])
    xA=CropObsDict['LAI_obs_6-aug-2007.csv']['DOY']
    yA=CropObsDict['LAI_obs_6-aug-2007.csv']['LAI']
    popt, pcov = curve_fit(sigmoid, xA, yA)    
    lai_function = sigmoid(Rangelai, *popt)



######## TO MODIFY YOURSELF: #########

    # writing the header row

    Results.write(             '%10s %10s        smi  curvature   Swin_max   SWin_int   Qnet_max   Qnet_int     LE_max     LE_int'\
                  '  LEveg_max  LEveg_int LEsoil_max LEsoil_int  LEliq_max  LEliq_int     SH_max     SH_int     GR_max     GR_int'\
   ' evafra_ave        beta_ave     Ra_14h     Ra_ave          Rs_14h          Rs_ave   Anet_min   Resp_max    NEE_min    wce_min'\
   '   Anet_int   Resp_int    NEE_int    wce_int  wce_h_int  wcs_h_int    wce_wcs      WUEplt_ave      WUEeco_ave      WUEint_ave'\
   '      WUEplt_std      WUEeco_std      WUEint_std   tm_range     tm_max     qm_ave  co2_range    co2_min      h_max      h_ran'\
		  '  lcl_h_min   wg_range     ts_max  wqe_h_int  wqs_h_int    wqe_wqs    wqe_int    VPD_ave     CD_ave   Anet_SUM'\
		  '    DTU_SUM        DVR evafra_14h  SWnet_12h  SWnet_int    thetam0        lai       cveg     qm_18h    wts_int'\
		  '    wte_int  wts_h_int  wte_h_int\n' %(Var1,Var2))


######################################

    for i, tag in enumerate(listofnamoptions):
        # opening the results files
        sensdir = 'SENS_'+tag[16:21]+tag[11:16] #the name of the SENS dir has var1 and var2 inverted compared to the namoptions file name
        tag = tag[-11:]
        print tag
        Dummy = open_output(os.path.join(analysisdir,sensdir),['output_dyn','output_sca'])

        # New variables
        #Ag = -Dummy['output_mxlgecros'+tag]['Anet_Turb(gCO2.m-2.s-1)']
        #ResPlant = (Dummy['output_gecros'+tag]['RESTOT'][len(Dummy['output_gecros'+tag]['RESTOT'])-1] * 
        #               Dummy['output_mxlgecros'+tag]['FromDailyTot.To.Instant']) *1000.
        #ResSoil = (Dummy['output_gecros'+tag]['RESCO2'][len(Dummy['output_gecros'+tag]['RESCO2'])-1] * 
        #               Dummy['output_mxlgecros'+tag]['FromDailyTot.To.Instant']) *1000.
        #Anet = Ag + ResPlant
        NEE  =  Dummy['output_sca']['An(mgCO2.m-2.s-1)'] + Dummy['output_sca']['Resp(mgCO2.m-2.s-1)']
        WUEplt = 0.001* 12./44.* Dummy['output_sca']['An(mgCO2.m-2.s-1)'] / (Dummy['output_dyn']['LEveg(W.m-2)'] / 2.5e6) # WUE in KgC.KgH2O-1
        WUEeco = 0.001* 12./44.* NEE / (Dummy['output_dyn']['LE(W.m-2)'] / 2.5e6)
	WUEint = (0.001*Dummy['output_sca']['An(mgCO2.m-2.s-1)']/44. * Dummy['output_sca']['rs(s.m-1)']*0.024 )*1000.
	evafra = Dummy['output_dyn']['LE(W.m-2)']/(Dummy['output_dyn']['LE(W.m-2)']+Dummy['output_dyn']['SH(W.m-2)'])

        try:
            # try finding the index of variables at 18hUTC. 
            # If values don't exist (the run has stopped before 14hUTC), an error is raised (see the except statement then)
            ID_sca_fin = numpy.where(Dummy['output_sca']['UTC(hours)']==18.)[0][0]
	    ID_dyn_fin = numpy.where(Dummy['output_dyn']['UTC(hours)']==18.)[0][0]
	    # try finding NaNs in the BL height column of the results file
	    # if NaNs are found, an error is raised (see the except statement then)
            check4NaN_dyn = numpy.where(numpy.invert(numpy.isnan(Dummy['output_dyn']['zi(m)'][ID_dyn_fin])))[0][0]
            check4NaN_sca = numpy.where(numpy.invert(numpy.isnan(Dummy['output_sca']['zi(m)'][ID_sca_fin])))[0][0]

        except IndexError as e:
            Var1val   = Range1[int(tag[3:6])-1]
            Var2val   = Range2[int(tag[9:12])-1]
            if (Var1.startswith('wg')): 
                smi   = (Var1val-0.06)/(0.15-0.06)
            elif (Var2.startswith('wg')): 
                smi   = (Var2val-0.06)/(0.15-0.06)
            else: 
                smi   = numpy.nan
		
            if (Var1 =='P4'): 
                step   = float(int(tag[3:6])-1)
            elif (Var2 == 'P4'): 
                step   = float(int(tag[8:11])-1)
            else: 
                step   = numpy.nan

            Swin_max  = max(Dummy['output_dyn']['Swin(W.m-2)'])
            Qnet_max  = max(Dummy['output_dyn']['Qnet(W.m-2)'])
	    
	    
            line = ('%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
	            '%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %10.5f %10.5f\n'
                                %(Var1val, Var2val, smi, step, Swin_max, Qnet_max, numpy.nan, numpy.nan, numpy.nan, numpy.nan,
	         numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, 
		 numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, 
		 numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, 
		 numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, 
		 numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan,
		 numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan, numpy.nan,
		 numpy.nan, numpy.nan, numpy.nan) )
        else:

            # selecting data at 12 hUTC
            ID_dyn_12 = numpy.where(Dummy['output_dyn']['UTC(hours)']==12.)[0][0]
            ID_sca_12 = numpy.where(Dummy['output_sca']['UTC(hours)']==12.)[0][0]
            ID_dyn_14 = numpy.where(Dummy['output_dyn']['UTC(hours)']==14.)[0][0]
            ID_sca_14 = numpy.where(Dummy['output_sca']['UTC(hours)']==14.)[0][0]
            ID_sca_18 = numpy.where(Dummy['output_sca']['UTC(hours)']==18.)[0][0]

            Ra_14h     = Dummy['output_sca']['ra(s.m-1)'][ID_sca_14]
            Rs_14h     = Dummy['output_sca']['rs(s.m-1)'][ID_sca_14]

            qm_14h     = Dummy['output_sca']['qm(g.kg-1)'][ID_sca_14]
            qsat_14h   = Dummy['output_sca']['qsatTs(g.kg-1)'][ID_sca_14]
            WUEplt_14h = WUEplt[ID_sca_14]
            WUEeco_14h = WUEeco[ID_sca_14]
	    WUEint_14h = WUEint[ID_sca_14]
	    VPD_14h    = Dummy['output_sca']['VPD(g.kg-1)'][ID_sca_14]
	    evafra_14h = evafra[ID_sca_14]
	    
	    SWnet_12h  = Dummy['output_dyn']['Swin(W.m-2)'][ID_sca_12]-Dummy['output_dyn']['Swout(W.m-2)'][ID_sca_12]

	    qm_18h     = Dummy['output_sca']['qm(g.kg-1)'][ID_sca_18]

            # average values:
            Ra_ave     = numpy.mean(Dummy['output_sca']['ra(s.m-1)'])
	    Rs_ave     = numpy.mean(Dummy['output_sca']['rs(s.m-1)'])
            qm_ave     = numpy.mean(Dummy['output_sca']['qm(g.kg-1)'])
            beta_ave   = numpy.mean(Dummy['output_dyn']['SH(W.m-2)']/Dummy['output_dyn']['LE(W.m-2)'])
            WUEplt_ave = numpy.mean(WUEplt)
            WUEeco_ave = numpy.mean(WUEeco)
	    WUEint_ave = numpy.mean(WUEint)
	    evafra_ave = numpy.mean(evafra)
	    #wcs_h_ave  = numpy.mean(1000.*Dummy['output_sca']['dwcs_dh(ppm.s-1)']) # ppb.s-1
	    #wce_h_ave  = numpy.mean(1000.*Dummy['output_sca']['dwce_dh(ppm.s-1)']) # ppb.s-1
	    VPD_ave    = numpy.mean(Dummy['output_sca']['VPD(g.kg-1)'])
	    CD_ave    = numpy.mean(Dummy['output_sca']['Cair-Ci(ppm)'])
	    
            # standard deviations:
            WUEplt_std = numpy.std(WUEplt)
            WUEeco_std = numpy.std(WUEeco)
	    WUEint_std = numpy.std(WUEint)

            # minimum values:
            lcl_h_min = min(Dummy['output_dyn']['lcl-zi(m)']) # if negative: clouds are forming, if positive: clear skies
            co2_min   = min(Dummy['output_sca']['cm(ppm)'])                # ppm
            Anet_min  = min(Dummy['output_sca']['An(mgCO2.m-2.s-1)'])      # mgCO2.m-2.s-1
            NEE_min   = min(NEE)                                           # mgCO2.m-2.s-1
            wce_min   = min(-Dummy['output_sca']['wce(mgCO2.m-2.s-1)'])    # mgCO2.m-2.s-1
	    wcs_h_min = min(1000.*Dummy['output_sca']['dwcs_dh(ppm.s-1)']) # ppb.s-1
	    wce_h_min = min(1000.*Dummy['output_sca']['dwce_dh(ppm.s-1)']) # ppb.s-1
	    
            # maximum values:
            tm_max    = max(Dummy['output_dyn']['thetam(K)'])
	    ts_max    = max(Dummy['output_dyn']['Tskin(K)'])
            Resp_max  = max(Dummy['output_sca']['Resp(mgCO2.m-2.s-1)'])
            Swin_max  = max(Dummy['output_dyn']['Swin(W.m-2)'])
            Qnet_max  = max(Dummy['output_dyn']['Qnet(W.m-2)'])
            SH_max    = max(Dummy['output_dyn']['SH(W.m-2)'])
            LE_max    = max(Dummy['output_dyn']['LE(W.m-2)'])
	    LEveg_max = max(Dummy['output_dyn']['LEveg(W.m-2)'])
	    LEsoil_max = max(Dummy['output_dyn']['LEsoil(W.m-2)'])
	    LEliq_max = max(Dummy['output_dyn']['LEliq(W.m-2)'])
            GR_max    = max(Dummy['output_dyn']['GR(W.m-2)'])
            h_max     = max(Dummy['output_dyn']['zi(m)'])
 
            # ranges:
            wg_ran  = max(Dummy['output_sca']['wg(cm3.cm-3)']) -  min(Dummy['output_sca']['wg(cm3.cm-3)']) # gecros soil model or Ags soil model?
            co2_ran = max(Dummy['output_sca']['cm(ppm)'])      -  min(Dummy['output_sca']['cm(ppm)'])
            tm_ran  = max(Dummy['output_dyn']['thetam(K)'])    -  min(Dummy['output_dyn']['thetam(K)'])
	    h_ran   = max(Dummy['output_dyn']['zi(m)'])        -  min(Dummy['output_dyn']['zi(m)'])
	    
	    # integrals:
	    # initialization of integrals
            sumwce = 0.
	    sumNEE = 0.
	    sumAnet = 0.
	    sumResp = 0.
	    sumSH = 0.
	    sumLE = 0.
	    sumLEveg = 0.
	    sumLEsoil = 0.
	    sumLEliq = 0.
	    sumGR = 0.
	    sumQnet = 0.
	    sumSWin = 0.
	    sumwqe_h = 0.
	    sumwqs_h = 0.
	    sumwqe = 0.
	    sumSWnet = 0.
	    sumwts = 0.
	    sumwte = 0.
	    sumwts_h = 0.
	    sumwte_h = 0.
	    
	    # time step in unit hours
	    dt = Dummy['output_sca']['UTC(hours)'][1] - Dummy['output_sca']['UTC(hours)'][0]
	    
	    # we sum all dY values in unit  ##.s-1
	    for j,val in enumerate(Dummy['output_dyn']['Swin(W.m-2)']):
	        if (val > 0. and 6. <= Dummy['output_sca']['UTC(hours)'][j] < 18.):
		    sumwce    = sumwce    - Dummy['output_sca']['wce(mgCO2.m-2.s-1)'][j]/1000.
		    sumNEE    = sumNEE    + (Dummy['output_sca']['An(mgCO2.m-2.s-1)'][j] + Dummy['output_sca']['Resp(mgCO2.m-2.s-1)'][j])/1000.
		    sumAnet   = sumAnet   + Dummy['output_sca']['An(mgCO2.m-2.s-1)'][j]/1000.
		    sumResp   = sumResp   + Dummy['output_sca']['Resp(mgCO2.m-2.s-1)'][j]/1000.
		    sumSH     = sumSH     + Dummy['output_dyn']['SH(W.m-2)'][j]
		    sumLE     = sumLE     + Dummy['output_dyn']['LE(W.m-2)'][j]
		    sumLEveg  = sumLEveg  + Dummy['output_dyn']['LEveg(W.m-2)'][j]
		    sumLEsoil = sumLEsoil + Dummy['output_dyn']['LEsoil(W.m-2)'][j]
		    sumLEliq  = sumLEliq  + Dummy['output_dyn']['LEliq(W.m-2)'][j]
		    sumGR     = sumGR     + Dummy['output_dyn']['GR(W.m-2)'][j]
		    sumQnet   = sumQnet   + Dummy['output_dyn']['Qnet(W.m-2)'][j]
		    sumSWin   = sumSWin   + val
		    sumSWnet  = sumSWnet  + (Dummy['output_dyn']['Swin(W.m-2)'][j]-Dummy['output_dyn']['Swout(W.m-2)'][j])
		    sumwqe_h  = sumwqe_h  - Dummy['output_sca']['wqe'][j]/Dummy['output_sca']['zi(m)'][j]
		    sumwqs_h  = sumwqs_h  + Dummy['output_sca']['wqs'][j]/Dummy['output_sca']['zi(m)'][j]
		    sumwqe    = sumwqe    - Dummy['output_sca']['wqe'][j] 
		    sumwts    = sumwts    + Dummy['output_dyn']['wts(Km.s-1)'][j]*1.2*1005.7 #in J.m-2
		    sumwte    = sumwte    - Dummy['output_dyn']['wte(Km.s-1)'][j]*1.2*1005.7 #in J.m-2
		    sumwts_h  = sumwts_h  + Dummy['output_dyn']['wts(Km.s-1)'][j]/Dummy['output_sca']['zi(m)'][j]
		    sumwte_h  = sumwte_h  - Dummy['output_dyn']['wte(Km.s-1)'][j]/Dummy['output_sca']['zi(m)'][j]
		    
	    # we multiply the sums by one dX in unit seconds
	    wce_int    = sumwce    * dt * 3600.            # gCO2.m-2.day-1 
	    NEE_int    = sumNEE    * dt * 3600.            # gCO2.m-2.day-1
	    Anet_int   = sumAnet   * dt * 3600.            # gCO2.m-2.day-1
	    Resp_int   = sumResp   * dt * 3600.            # gCO2.m-2.day-1
	    SH_int     = sumSH     * dt * 3600. /1000000.  # MJ.m-2 .day-1
	    LE_int     = sumLE     * dt * 3600. /1000000.  # MJ.m-2.day-1	
	    LEveg_int  = sumLEveg  * dt * 3600. /1000000.  # MJ.m-2.day-1
	    LEsoil_int = sumLEsoil * dt * 3600. /1000000.  # MJ.m-2.day-1
	    LEliq_int  = sumLEliq  * dt * 3600. /1000000.  # MJ.m-2.day-1
	    GR_int     = sumGR     * dt * 3600. /1000000.  # MJ.m-2.day-1
	    SWin_int   = sumSWin   * dt * 3600. /1000000.  # MJ.m-2.day-1
	    SWnet_int  = sumSWnet  * dt * 3600. /1000000.  # MJ.m-2.day-1
	    Qnet_int   = sumQnet   * dt * 3600. /1000000.  # MJ.m-2.day-1
	    wqe_h_int  = sumwqe_h  * dt * 3600.            # g.kg-1.day-1
	    wqs_h_int  = sumwqs_h  * dt * 3600.            # g.kg-1.day-1
	    wqe_int    = (sumwqe   * dt * 3600. * 1.2* 2.501e6 * 1.0e-3) /1000000. # MJ.m-2
	    wts_int    = sumwts    * dt * 3600. /1000000.  # MJ.m-2.day-1
	    wte_int    = sumwte    * dt * 3600. /1000000.  # MJ.m-2.day-1
	    wts_h_int  = sumwts_h  * dt * 3600.            # K.day-1
	    wte_h_int  = sumwte_h  * dt * 3600.            # K.day-1
	    
	    
	    # two integrals were calculated and printed out in the output files:
	    wce_h_int = Dummy['output_sca']['dwce_dh_sum(ppm)'][len(Dummy['output_sca']['dwce_dh_sum(ppm)'])-1]   # in ppm.day-1
	    wcs_h_int = Dummy['output_sca']['dwcs_dh_sum(ppm)'][len(Dummy['output_sca']['dwcs_dh_sum(ppm)'])-1]   # in ppm.day-1
	    Anet_SUM  = Dummy['output_sca']['AnSUM(gCO2.m-2)'][len(Dummy['output_sca']['AnSUM(gCO2.m-2)'])-1]
	    DTU_SUM   = Dummy['output_sca']['DTU(-)'][len(Dummy['output_sca']['DTU(-)'])-1]
	    DVR       = Dummy['output_sca']['DVR(d-1)'][len(Dummy['output_sca']['DVR(d-1)'])-1]
	    
	    # unitless ratio of the integrals
	    wce_wcs   = wce_h_int/wcs_h_int
	    wqe_wqs   = wqe_h_int/wqs_h_int
	    	    
            # Other       
            Var1val   = Range1[int(tag[3:6])-1]
            Var2val   = Range2[int(tag[8:11])-1]

            if (Var1.startswith('wg')): 
                smi   = (Var1val-0.06)/(0.15-0.06)
            elif (Var2.startswith('wg')): 
                smi   = (Var2val-0.06)/(0.15-0.06)
            else: 
                smi   = numpy.nan
		
            if (Var1 =='P4'): 
                step   = float(int(tag[3:6])-1)
            elif (Var2 == 'P4'): 
                step   = float(int(tag[8:11])-1)
            else: 
                step   = numpy.nan
	    
	    if (Var1 == 'day'):
	        day = float(int(tag[3:6])-1) 
	        lai = lai_function[day]
		cveg = 1.- numpy.exp(-lai)
	    elif (Var2 == 'day'):
	        day = float(int(tag[8:11])-1) 
	        lai = lai_function[day]
		cveg = 1.- numpy.exp(-lai)	    
	    else:
	        lai = numpy.nan
		cveg = numpy.nan
            
	    thetam0 = Dummy['output_dyn']['thetam(K)'][0]
		

######## TO MODIFY YOURSELF: #########
            # writing the output
            line = ('%10.5f %10.7f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
	            '%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %15.5f %10.5f %10.5f %15.5f %15.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %15.5f %15.5f %15.5f '\
		    '%15.5f %15.5f %15.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f '\
		    '%10.5f %10.5f %10.5f\n'
            %(     Var1val,   Var2val,       smi,      step,  Swin_max,  SWin_int,  Qnet_max,  Qnet_int,    LE_max,    LE_int,
	         LEveg_max, LEveg_int,LEsoil_max,LEsoil_int, LEliq_max, LEliq_int,    SH_max,    SH_int,    GR_max,    GR_int,
		evafra_ave,  beta_ave,    Ra_14h,    Ra_ave,    Rs_14h,    Rs_ave,  Anet_min,  Resp_max,   NEE_min,   wce_min,
		  Anet_int,  Resp_int,   NEE_int,   wce_int, wce_h_int, wcs_h_int,   wce_wcs,WUEplt_ave,WUEeco_ave,WUEint_ave,
		WUEplt_std,WUEeco_std,WUEint_std,    tm_ran,    tm_max,    qm_ave,   co2_ran,   co2_min,     h_max,     h_ran,
		 lcl_h_min,    wg_ran,    ts_max, wqe_h_int, wqs_h_int,   wqe_wqs,   wqe_int,   VPD_ave,    CD_ave,  Anet_SUM,
		   DTU_SUM,       DVR,evafra_14h, SWnet_12h, SWnet_int,   thetam0,       lai,      cveg,    qm_18h,   wts_int,
	           wte_int, wts_h_int, wte_h_int) )
######################################

        Results.write(line)

    Results.close()

    #shutil.move(os.path.join(analysisdir,resfile), currentdir)




